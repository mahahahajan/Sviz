{"version":3,"sources":["logomark1white.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","setColor","event","element","target","social","id","console","log","style","color","regColor","openPage","window","open","state","bgColor","textColor","bind","body","document","querySelector","backgroundColor","this","myLogo","logo","className","Container","fluid","Image","src","height","Row","Col","xl","span","offset","md","onClick","onMouseEnter","onMouseLeave","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.59083c56.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logomark1white.f5ce80b6.png\";","import React, { Component } from 'react';\nimport {Container, Row, Col, Image} from 'react-bootstrap';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport logo from './logomark1white.png'\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      bgColor: \"#212120\",\n      textColor: \"white\",\n\n    }\n    this.setColor = this.setColor.bind(this);\n    this.regColor = this.regColor.bind(this);\n    this.openPage = this.openPage.bind(this);\n  }\n  setColor = (event) => {\n    let element = event.target;\n    let social = element.id;\n    console.log(social);\n    switch (social) {\n      case \"TikTok\":\n        element.style.color = \"#fd3e3e\";\n        break;\n      case \"Twitter\":\n        element.style.color = \"#1DA1F2\";\n        break;\n      case \"YouTube\":\n        element.style.color = \"#FF0000\";\n        break;\n      case \"Instagram\":\n        element.style.color = \"#833AB4\";\n        break;\n      case \"Twitch\":\n        element.style.color = \"#6441A5\";\n        break;\n      case \"Website\":\n        element.style.color = \"black\";\n        break;\n      default:\n        element.style.color=\"black\";\n        break;\n    }\n  }\n  regColor = (event) => {\n    let element = event.target;\n    element.style.color= \"white\";\n  }\n  openPage = (event) => {\n    let element = event.target;\n    let social = element.id;\n    console.log(social);\n    switch (social) {\n      case \"TikTok\":\n        window.open(\"https://www.tiktok.com/@sviz\", \"_blank\");\n        break;\n      case \"Twitter\":\n        window.open(\"https://www.twitter.com/svizify\", \"_blank\");\n        break;\n      case \"YouTube\":\n        window.open(\"https://www.youtube.com/svizify\", \"_blank\");\n        break;\n      case \"Instagram\":\n        window.open(\"https://www.instagram.com/svizify\", \"_blank\");\n        break;\n      case \"Twitch\":\n        window.open(\"https://www.twitch.tv/sviz\", \"_blank\");\n        break;;\n        break;\n      case \"Website\":\n        window.open(\"https://www.behance.net/sviz\", \"_blank\");\n        break;\n      default:\n        window.open(\"https://www.google.com\", \"_blank\");\n        break;  \n      }\n  }\n  componentDidMount() {\n\n    // this.getQuote();\n    // this.setBackground();\n  }\n\n  render() {\n    let body = document.querySelector(\"body\").style;\n    body.backgroundColor = this.state.bgColor;\n    body.color = this.state.textColor;\n    let xlSize = 4;\n    let xlOffset = 4;\n    let mlSize = 8;\n    let mlOffset = 2;\n    let myLogo = logo\n    return (\n      <div >\n        <div className=\"topHeader\">\n        <Container fluid>\n        <center><Image src={myLogo} height=\"180px\"></Image> </center>\n        </Container>\n       \n        </div>\n        \n        <Container fluid >\n          <Row>\n            <Col xl={{ span: xlSize, offset: xlOffset }} md={{span: mlSize, offset: mlOffset}} > \n              <button id=\"TikTok\"  className=\"socialLink\" onClick={event => this.openPage(event)} onMouseEnter={event => this.setColor(event)} onMouseLeave={event => this.regColor(event)}> Tik Tok </button> \n            </Col>\n          </Row>\n          <Row>\n            <Col xl={{ span: xlSize, offset: xlOffset }} md={{span: mlSize, offset: mlOffset}}> \n            <button id=\"Twitter\" className=\"socialLink\" onClick={event => this.openPage(event)} onMouseEnter={event => this.setColor(event)} onMouseLeave={event => this.regColor(event)}> Twitter </button>\n            </Col>\n          </Row>\n          {/* <Row>\n            <Col xl={{ span: size, offset: offset }} > \n            <button id=\"TikTok\" className=\"socialLink\" onMouseEnter={event => this.setColor(event)} onMouseLeave={event => this.regColor(event)}> Tik Tok </button> \n            </Col>\n          </Row> */}\n          <Row>\n            <Col xl={{ span: xlSize, offset: xlOffset }} md={{span: mlSize, offset: mlOffset}}> \n            <button id=\"YouTube\" className=\"socialLink\" onClick={event => this.openPage(event)} onMouseEnter={event => this.setColor(event)} onMouseLeave={event => this.regColor(event)}> YouTube </button>\n            </Col>\n          </Row>\n          <Row>\n            <Col xl={{ span: xlSize, offset: xlOffset }} md={{span: mlSize, offset: mlOffset}}> \n            <button id=\"Instagram\" className=\"socialLink\" onClick={event => this.openPage(event)} onMouseEnter={event => this.setColor(event)} onMouseLeave={event => this.regColor(event)}> Instagram </button>\n            </Col>\n          </Row>\n          <Row>\n            <Col xl={{ span: xlSize, offset: xlOffset }} md={{span: mlSize, offset: mlOffset}} > \n            <button id=\"Twitch\" className=\"socialLink\" onClick={event => this.openPage(event)} onMouseEnter={event => this.setColor(event)} onMouseLeave={event => this.regColor(event)}> Twitch </button>\n            </Col>\n          </Row>\n          <Row>\n            <Col xl={{ span: xlSize, offset: xlOffset }} md={{span: mlSize, offset: mlOffset}}> \n            <button id=\"Website\" className=\"socialLink\" onClick={event => this.openPage(event)} onMouseEnter={event => this.setColor(event)} onMouseLeave={event => this.regColor(event)}> Portfolio </button>\n            </Col>\n          </Row>\n        </Container>\n        \n          {/*\n          tik tok\n          twitter\n          youtube\n          instagram\n          twitch\n          portfolio \n          */\n          }\n         \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"react-bootstrap\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}